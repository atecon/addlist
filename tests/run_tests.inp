set verbose off
clear

include "./src/addlist.inp" --force

include assertion.gfn


function void test_get_quiet_string (void)
    print "Start with get_quiet_string()"

    string str = get_quiet_string(1)
    assert_equal_str(str, "--quiet")

    string str = get_quiet_string(0)
    assert_equal_str(str, "")

    string str = get_quiet_string(NA)
    assert_equal_str(str, "--quiet")
end function
test_get_quiet_string()


function void test_dict_models (void)
    print "Start with dict_models()"

    bundle models = dict_models()
    strings keys = getkeys(models)

    assert_equal_num(nelem(models), 4)
    assert_equal_num(nelem(keys), 4)

    assert_true(inbundle(models, "ols"))
    assert_true(inbundle(models, "fixed_effects"))
    assert_true(inbundle(models, "random_effects"))
    assert_true(inbundle(models, "pooled"))
end function
test_dict_models()


function void test_estimator_command (void)
    print "Start with dict_models()"

    string estimator_name = "ols"
    scalar with_candidate_list = 0
    scalar quiet = 0
    string str = estimator_command(estimator_name, with_candidate_list, quiet)
    assert_equal_str(strstrip(str), "ols y list0")

    string estimator_name = "ols"
    scalar with_candidate_list = 1
    scalar quiet = 0
    string str = estimator_command(estimator_name, with_candidate_list, quiet)
    assert_equal_str(strstrip(str), "ols y list0 candidate_vars")

    string estimator_name = "ols"
    scalar with_candidate_list = 0
    scalar quiet = 1
    string str = estimator_command(estimator_name, with_candidate_list, quiet)
    assert_equal_str(strstrip(str), "ols y list0  --quiet")

    string estimator_name = "ols"
    scalar with_candidate_list = 1
    scalar quiet = 1
    string str = estimator_command(estimator_name, with_candidate_list, quiet)
    assert_equal_str(strstrip(str), "ols y list0 candidate_vars  --quiet")

    string estimator_name = "fixed_effects"
    scalar with_candidate_list = 1
    scalar quiet = 1
    string str = estimator_command(estimator_name, with_candidate_list, quiet)
    assert_equal_str(strstrip(str), \
      "panel y list0 candidate_vars --fixed-effects --quiet")

    string estimator_name = "random_effects"
    scalar with_candidate_list = 1
    scalar quiet = 1
    string str = estimator_command(estimator_name, with_candidate_list, quiet)
    assert_equal_str(strstrip(str), \
      "panel y list0 candidate_vars --random-effects --quiet")

    string estimator_name = "pooled"
    scalar with_candidate_list = 1
    scalar quiet = 0
    string str = estimator_command(estimator_name, with_candidate_list, quiet)
    assert_equal_str(strstrip(str), \
      "panel y list0 candidate_vars --pooled")
end function
test_estimator_command()


function void test_criterion_is_supported (void)
    print "Start with criterion_is_supported()"

    string estimator_name = "ols"
    loop i=1..4 -q
        scalar scal = criterion_is_supported(estimator_name, $i)
        assert_true(scal)
    endloop

    string estimator_name = "fixed_effects"
    loop i=1..4 -q
        scalar scal = criterion_is_supported(estimator_name, $i)
        if i != 4
            assert_true(scal)
        else
            assert_false(scal)
        endif
    endloop

    string estimator_name = "random_effects"
    loop i=1..4 -q
        scalar scal = criterion_is_supported(estimator_name, $i)
        if i != 4
            assert_true(scal)
        else
            assert_false(scal)
        endif
    endloop

    string estimator_name = "pooled"
    loop i=1..4 -q
        scalar scal = criterion_is_supported(estimator_name, $i)
        if i != 4
            assert_true(scal)
        else
            assert_false(scal)
        endif
    endloop
end function
test_criterion_is_supported()


function void test_map_crit_to_accessors (void)
    print "Start with map_critierion_to_accessors()"

    loop i=1..4 -q
        bundle b = map_critierion_to_accessors($i)
        assert_equal_num(nelem(b), 2)
        assert_true(inbundle(b, "criterion_name"))
        assert_true(inbundle(b, "criterion_accessor"))
    endloop

    bundle b = map_critierion_to_accessors(1)
    assert_equal_str(b.criterion_name, "AIC")
    assert_equal_str(b.criterion_accessor, "$aic")

    bundle b = map_critierion_to_accessors(2)
    assert_equal_str(b.criterion_name, "BIC")
    assert_equal_str(b.criterion_accessor, "$bic")
    
    bundle b = map_critierion_to_accessors(3)
    assert_equal_str(b.criterion_name, "HQC")
    assert_equal_str(b.criterion_accessor, "$hqc")
    
    bundle b = map_critierion_to_accessors(4)
    assert_equal_str(b.criterion_name, "CVC")
    assert_equal_str(b.criterion_accessor, "$test")
end function
test_map_crit_to_accessors()


function void test_check_estimator_name (void)
    print "Start with check_estimator_name()"

    string estimator_name = "ols"
    check_estimator_name(estimator_name)

    string estimator_name = "fixed_effects"
    check_estimator_name(estimator_name)

    string estimator_name = "random_effects"
    check_estimator_name(estimator_name)

    string estimator_name = "pooled"
    check_estimator_name(estimator_name)
end function
test_check_estimator_name()


function void test_update_criterion_value (void)
    print "Start with update_criterion_value()"

    scalar criterion_value = 2
    scalar criterion_minimum = 1
    string variable_name = "foo"
    string bestx = ""
    string name_added_var = ""
    scalar scal = update_criterion_value(criterion_value, criterion_minimum, \
      variable_name, &bestx, &name_added_var)
  
    assert_equal_num(scal, criterion_minimum)
    assert_equal_str(bestx, "")
    assert_equal_str(name_added_var, "")
    

    scalar criterion_value = 1
    scalar criterion_minimum = 2
    string variable_name = "foo"
    string bestx = ""
    string name_added_var = ""
    scalar scal = update_criterion_value(criterion_value, criterion_minimum, \
      variable_name, &bestx, &name_added_var)
  
    assert_equal_num(scal, criterion_value)
    assert_equal_str(bestx, "list1.foo")
    assert_equal_str(name_added_var, "foo")


    scalar criterion_value = 2
    scalar criterion_minimum = 2
    string variable_name = "foo"
    string bestx = ""
    string name_added_var = ""
    scalar scal = update_criterion_value(criterion_value, criterion_minimum, \
      variable_name, &bestx, &name_added_var)
  
    assert_equal_num(scal, criterion_minimum)
    assert_equal_str(bestx, "")
    assert_equal_str(name_added_var, "")


    scalar criterion_value = 1
    scalar criterion_minimum = 2
    string variable_name = "foo"
    string bestx = "list1.fufu"
    string name_added_var = "fufu"
    scalar scal = update_criterion_value(criterion_value, criterion_minimum, \
      variable_name, &bestx, &name_added_var)
  
    assert_equal_num(scal, criterion_value)
    assert_equal_str(bestx, "list1.foo")
    assert_equal_str(name_added_var, "foo")
end function
test_update_criterion_value()


open grunfeld.gdt -q -p
function void test_compute_final_list_of_vars (series y, list data_set)
    print "Start with compute_final_list_of_vars(): no regressors will be added"

    scalar quiet = 1
    series y = data_set.invest
    
    list L0 = const 
    list L1 = data_set.value data_set.kstock data_set.time
    scalar criterion = 1
    bundle CRIT = map_critierion_to_accessors(criterion)
    scalar criterion_minimum = -10000
    
    # no additional variable should be selected
    string estimator_name = "ols"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 1)
    assert_equal_str(varnames(L2)[1], "const")

    # no additional variable should be selected
    string estimator_name = "fixed_effects"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 1)
    assert_equal_str(varnames(L2)[1], "const")

    # no additional variable should be selected
    string estimator_name = "random_effects"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 1)
    assert_equal_str(varnames(L2)[1], "const")

    # no additional variable should be selected
    string estimator_name = "pooled"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 1)
    assert_equal_str(varnames(L2)[1], "const")
end function
test_compute_final_list_of_vars(invest, dataset)


function void test_compute_final_list_of_vars (series y, list data_set)
    print "Start with compute_final_list_of_vars():"
    print "Based on estimator, some variables should be added based on AIC"

    scalar quiet = 0
    series y = data_set.invest
    
    list L0 = const 
    list L1 = data_set.value data_set.kstock data_set.time
    scalar criterion = 1
    bundle CRIT = map_critierion_to_accessors(criterion)
    scalar criterion_minimum = 2500
    
    string estimator_name = "ols"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 3)
    assert_equal_str(varnames(L2)[1], "const")
    assert_equal_str(varnames(L2)[2], "value")
    assert_equal_str(varnames(L2)[3], "kstock")

    string estimator_name = "fixed_effects"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 4)
    assert_equal_str(varnames(L2)[1], "const")
    assert_equal_str(varnames(L2)[2], "kstock")
    assert_equal_str(varnames(L2)[3], "value")
    assert_equal_str(varnames(L2)[4], "time")

    string estimator_name = "random_effects"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 3)
    assert_equal_str(varnames(L2)[1], "const")
    assert_equal_str(varnames(L2)[2], "value")
    assert_equal_str(varnames(L2)[3], "kstock")

    string estimator_name = "pooled"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 3)
    assert_equal_str(varnames(L2)[1], "const")
    assert_equal_str(varnames(L2)[2], "value")
    assert_equal_str(varnames(L2)[3], "kstock")
end function
test_compute_final_list_of_vars(invest, dataset)


function void test_compute_final_list_of_vars (series y, list data_set)
    print "Start with compute_final_list_of_vars():"
    print "Based on estimator, some variables should be added based on BIC"

    scalar quiet = 0
    series y = data_set.invest
    
    list L0 = const 
    list L1 = data_set.value data_set.kstock data_set.time
    scalar criterion = 2
    bundle CRIT = map_critierion_to_accessors(criterion)
    scalar criterion_minimum = 2500
    
    string estimator_name = "ols"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 3)
    assert_equal_str(varnames(L2)[1], "const")
    assert_equal_str(varnames(L2)[2], "value")
    assert_equal_str(varnames(L2)[3], "kstock")

    string estimator_name = "fixed_effects"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 4)
    assert_equal_str(varnames(L2)[1], "const")
    assert_equal_str(varnames(L2)[2], "kstock")
    assert_equal_str(varnames(L2)[3], "value")
    assert_equal_str(varnames(L2)[4], "time")

    string estimator_name = "random_effects"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 3)
    assert_equal_str(varnames(L2)[1], "const")
    assert_equal_str(varnames(L2)[2], "value")
    assert_equal_str(varnames(L2)[3], "kstock")

    string estimator_name = "pooled"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 3)
    assert_equal_str(varnames(L2)[1], "const")
    assert_equal_str(varnames(L2)[2], "value")
    assert_equal_str(varnames(L2)[3], "kstock")
end function
test_compute_final_list_of_vars(invest, dataset)


function void test_compute_final_list_of_vars (series y, list data_set)
    print "Start with compute_final_list_of_vars():"
    print "Based on estimator, some variables should be added based on CVC"

    scalar quiet = 0
    series y = data_set.invest
    
    list L0 = const 
    list L1 = data_set.value data_set.kstock data_set.time
    scalar criterion = 4
    bundle CRIT = map_critierion_to_accessors(criterion)
    
    scalar criterion_minimum = 2500
    string estimator_name = "ols"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 1)
    assert_equal_str(varnames(L2)[1], "const")

    scalar criterion_minimum = 3000000
    string estimator_name = "ols"
    list L2 = compute_final_list_of_vars(y, L0, L1, estimator_name, CRIT, \
      criterion_minimum, quiet)
    assert_equal_num(nelem(L2), 3)
    assert_equal_str(varnames(L2)[1], "const")
    assert_equal_str(varnames(L2)[2], "value")
    assert_equal_str(varnames(L2)[3], "kstock")
end function
test_compute_final_list_of_vars(invest, dataset)



function void test_addlist_pooled (series y, list data_set)
    print "Start with addlist(): pooled-ols"
    
    string estimator_name = "pooled"
    scalar quiet = 1
    series y = data_set.invest    
    list L0 = const 
    list L1 = data_set.value data_set.kstock data_set.time
    
    loop i=1..4 -q
        list final = addlist(y, L0, L1, $i, quiet, estimator_name)
    endloop
end function
test_addlist_pooled(invest, dataset)


function void test_addlist_fixedeffects (series y, list data_set)
    print "Start with addlist(): fixed-effects"
    
    string estimator_name = "fixed_effects"
    scalar quiet = 1
    series y = data_set.invest    
    list L0 = const 
    list L1 = data_set.value data_set.kstock data_set.time
    
    loop i=1..4 -q
        list final = addlist(y, L0, L1, $i, quiet, estimator_name)
    endloop
end function
test_addlist_fixedeffects(invest, dataset)


function void test_addlist_randomeffects (series y, list data_set)
    print "Start with addlist(): random-effects"
    
    string estimator_name = "random_effects"
    scalar quiet = 1
    series y = data_set.invest    
    list L0 = const 
    list L1 = data_set.value data_set.kstock data_set.time
    
    loop i=1..4 -q
        list final = addlist(y, L0, L1, $i, quiet, estimator_name)
    endloop
end function
test_addlist_randomeffects(invest, dataset)


open data4-10 -p -q
function void test_addlist_ols (series y, list data_set)
    print "Start with addlist(): ols"
    
    string estimator_name = "ols"
    scalar quiet = 1
    series y = data_set.ENROLL
    list L0 = const data_set.CATHOL INCOME 
    list L1 = data_set.PUPIL data_set.WHITE data_set.ADMEXP \
      data_set.REV data_set.MEMNEA data_set.COLLEGE
    
    loop i=1..4 -q
        list final = addlist(y, L0, L1, $i, quiet, estimator_name)
    endloop
end function
test_addlist_ols(ENROLL, dataset)




printf "\nInfo: All tests passed.\n"
